(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const entities = Object.create(null);
exports.createEntity = (id, extension) => {
    if (entities[id] != null) {
        throw new Error("Entity already exists");
    }
    entities[id] =
        extension != null ? Object.assign({}, extension, { id }) : { id };
    return entities[id];
};
exports.extendEntity = (entity, extension) => {
    return Object.assign(entity, extension);
};
function isTangibleEntity(point) {
    return "location" in point;
}
exports.isTangibleEntity = isTangibleEntity;
},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const getImageFromId = (id) => document.getElementById(id);
exports.entities = {
    player: {
        id: "player",
        sprite: [
            {
                image: getImageFromId("resource-player0"),
                tileSize: 16,
                x: 2,
                y: 3,
                width: 1,
                height: 1
            },
            {
                image: getImageFromId("resource-player1"),
                tileSize: 16,
                x: 2,
                y: 3,
                width: 1,
                height: 1
            }
        ]
    },
    // Better way to handle tiles/tilesets?
    tiles: {
        grass: {
            id: "tiles/grass",
            sprite: {
                image: getImageFromId("resource-floor"),
                tileSize: 16,
                x: 8,
                y: 7,
                width: 1,
                height: 1
            },
            collision: false
        },
        wall: {
            id: "tiles/wall",
            sprite: {
                image: getImageFromId("resource-wall"),
                tileSize: 16,
                x: 3,
                y: 3,
                width: 1,
                height: 1
            },
            collision: true
        }
    }
};
exports.map = [
    [
        "################",
        "#..............#",
        "#..............#",
        "#..............#",
        "#..............#",
        "#..............#",
        "#....######....#",
        "#....#....#....#",
        "#....#....#....#",
        "#....#....#....#",
        "#....##.###....#",
        "#..............#",
        "#..............#",
        "#..............#",
        "#..............#",
        "################"
    ],
    [
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "       @        ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                "
    ]
];
exports.tiles = {
    "#": exports.entities.tiles.wall.id,
    ".": exports.entities.tiles.grass.id,
    "@": exports.entities.player.id
};
},{}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config = require("./game.config");
const scene_1 = require("./scene");
const sprite_1 = require("./sprite");
const entity_1 = require("./entity");
exports.scene = scene_1.createScene();
const playerCamera = {
    scene: exports.scene,
    canvas: null,
    tileSize: 48,
    x: 0,
    y: 0,
    width: 12,
    height: 12,
    focus: {
        width: 6,
        height: 6
    }
};
exports.createPlayerCamera = (canvas) => {
    playerCamera.canvas = canvas;
    exports.centerCamera();
    return playerCamera;
};
exports.centerCamera = () => {
    if (player) {
        const cameraMarginX = Math.floor((playerCamera.width - playerCamera.focus.width) / 2);
        const cameraMarginY = Math.floor((playerCamera.height - playerCamera.focus.height) / 2);
        if (player.location.x >=
            playerCamera.focus.width + playerCamera.x + cameraMarginX) {
            playerCamera.x =
                player.location.x + 1 - playerCamera.focus.width - cameraMarginX;
        }
        if (player.location.y >=
            playerCamera.focus.height + playerCamera.y + cameraMarginY) {
            playerCamera.y =
                player.location.y + 1 - playerCamera.focus.height - cameraMarginY;
        }
        if (player.location.x < playerCamera.x + cameraMarginX) {
            playerCamera.x = player.location.x - cameraMarginX;
        }
        if (player.location.y < playerCamera.y + cameraMarginY) {
            playerCamera.y = player.location.y - cameraMarginY;
        }
    }
    if (playerCamera.canvas) {
        playerCamera.width = Math.ceil(playerCamera.canvas.width / playerCamera.tileSize);
        playerCamera.height = Math.ceil(playerCamera.canvas.height / playerCamera.tileSize);
    }
};
const tileEntities = ((tiles) => {
    const entities = {};
    for (const name in tiles) {
        const entity = sprite_1.createSprite(tiles[name]);
        if (isCollidable(tiles[name])) {
            entity.collision = tiles[name].collision;
        }
        entities[entity.id] = entity;
    }
    return entities;
})(config.entities.tiles);
const addTile = (name, location) => {
    return entity_1.extendEntity(scene_1.addChild(exports.scene.root, tileEntities[name]).entity, {
        location
    });
};
tileEntities.player = sprite_1.createSprite(config.entities.player);
let player = null;
function isCollidable(entity) {
    return "collision" in entity;
}
const collisionMap = [];
for (let z = 0; z < config.map.length; z++) {
    for (let y = 0; y < config.map[z].length; y++) {
        for (let x = 0; x < config.map[z][y].length; x++) {
            const name = config.tiles[config.map[z][y][x]];
            const entity = addTile(name, {
                x,
                y,
                z
            });
            if (isCollidable(entity)) {
                if (!collisionMap[x]) {
                    collisionMap[x] = [];
                }
                collisionMap[x][y] = entity.collision;
            }
            if (name === "player") {
                player = entity;
            }
        }
    }
}
playerCamera.x = Math.floor(player.location.x - playerCamera.width / 2);
playerCamera.y = Math.floor(player.location.y - playerCamera.height / 2);
var KeyMap;
(function (KeyMap) {
    KeyMap[KeyMap["left"] = 37] = "left";
    KeyMap[KeyMap["up"] = 38] = "up";
    KeyMap[KeyMap["right"] = 39] = "right";
    KeyMap[KeyMap["down"] = 40] = "down";
})(KeyMap = exports.KeyMap || (exports.KeyMap = {}));
exports.handleInput = (keysPressed) => {
    let turnTaken = false;
    let vecMovement = [0, 0];
    const collisionAt = (relX, relY) => {
        const newX = player.location.x + relX;
        const newY = player.location.y + relY;
        return collisionMap[newX] && collisionMap[newX][newY];
    };
    if (keysPressed[KeyMap.left] && !collisionAt(-1, 0))
        vecMovement[0]--;
    if (keysPressed[KeyMap.up] && !collisionAt(0, -1))
        vecMovement[1]--;
    if (keysPressed[KeyMap.right] && !collisionAt(1, 0))
        vecMovement[0]++;
    if (keysPressed[KeyMap.down] && !collisionAt(0, 1))
        vecMovement[1]++;
    // No diagonal movement
    if (Math.abs(vecMovement[0]) + Math.abs(vecMovement[1]) === 1) {
        player.location.x += vecMovement[0];
        player.location.y += vecMovement[1];
        turnTaken = true;
    }
    return turnTaken;
};
exports.preRender = ({ camera, animState }) => {
    exports.centerCamera();
};
},{"./entity":1,"./game.config":2,"./scene":7,"./sprite":8}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isOverlap = ({ x: x1, y: y1, width: w1 = 0, height: h1 = 0 }, { x: x2, y: y2, width: w2 = 0, height: h2 = 0 }) => x1 <= x2 + w2 && x1 + w1 >= x2 && y1 <= y2 + h2 && y1 + h1 >= y2;
},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const renderer_1 = require("./renderer");
const game_1 = require("./game");
// Setup
const $canvas = document.createElement("canvas");
$canvas.width = innerWidth;
$canvas.height = innerHeight;
$canvas.style.position = "absolute";
$canvas.style.top = "0";
$canvas.style.left = "0";
$canvas.style.margin = "0";
document.body.appendChild($canvas);
// Input
// TODO: clean up buffering code, optimize?
const keysDown = Object.create(null);
const keysUp = Object.create(null);
window.addEventListener("keydown", e => {
    if (e.keyCode in game_1.KeyMap) {
        keysDown[e.keyCode] = true;
        e.preventDefault();
    }
});
window.addEventListener("keyup", e => {
    if (e.keyCode in game_1.KeyMap) {
        keysUp[e.keyCode] = true;
        e.preventDefault();
    }
});
let prevInput = 0;
const input = () => {
    const delta = time.curTime - prevInput;
    let keyPressed = false;
    for (let keyCode in game_1.KeyMap) {
        if (!isNaN(Number(keyCode))) {
            if (delta < time.animResolution) {
                keysDown[keyCode] = keysUp[keyCode] ? false : keysDown[keyCode];
                keysUp[keyCode] = false;
                keyPressed = false;
            }
            else {
                keyPressed = keysDown[keyCode] || keyPressed;
            }
        }
    }
    if (keyPressed) {
        const turnTaken = game_1.handleInput(Object.assign(Object.create(null), keysDown));
        if (turnTaken)
            prevInput = time.curTime;
    }
};
const stats = new Stats();
document.body.appendChild(stats.dom);
// Render Loop
const time = {
    start: 0,
    prevTime: 0,
    curTime: performance.now(),
    animCounter: 0,
    animState: 0,
    animResolution: 500
};
const camera = game_1.createPlayerCamera($canvas);
const loop = () => {
    if (time.start === 0)
        time.start = performance.now();
    time.curTime = performance.now();
    const deltaTime = time.curTime - time.prevTime;
    time.animCounter += deltaTime;
    time.animState = Math.floor(time.animCounter / time.animResolution);
    input();
    if (time.prevTime !== 0) {
        $canvas.width = innerWidth;
        $canvas.height = innerHeight;
        const ctx = $canvas.getContext("2d");
        if (ctx) {
            game_1.preRender({ camera, animState: time.animState });
            renderer_1.render({
                ctx,
                camera,
                animState: time.animState
            });
        }
    }
    stats.update();
    requestAnimationFrame(loop);
    time.prevTime = time.curTime;
};
loop();
},{"./game":3,"./renderer":6}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sprite_1 = require("./sprite");
const geometry_1 = require("./geometry");
const entity_1 = require("./entity");
const drawSprite = (ctx, sprite, tileSize, dstX, dstY) => {
    ctx.drawImage(sprite.image, sprite.x * sprite.tileSize, sprite.y * sprite.tileSize, sprite.width * sprite.tileSize, sprite.height * sprite.tileSize, dstX * tileSize, dstY * tileSize, sprite.width * tileSize, sprite.height * tileSize);
};
const drawEntity = (ctx, entity, animation, tileSize, dstX, dstY) => {
    const sprite = Array.isArray(entity.sprite)
        ? entity.sprite[animation % entity.sprite.length]
        : entity.sprite;
    drawSprite(ctx, sprite, tileSize, dstX, dstY);
};
exports.render = ({ ctx, camera, animState }) => {
    ctx.imageSmoothingEnabled = false;
    ctx.fillStyle = "black";
    ctx.fillRect(0, 0, camera.canvas.width, camera.canvas.height);
    const sprites = Object.create(null);
    for (const node of camera.scene.nodes) {
        const entity = node.entity;
        if (sprite_1.isSpriteEntity(entity) &&
            entity_1.isTangibleEntity(entity) &&
            geometry_1.isOverlap(camera, entity.location)) {
            sprites[entity.location.z] = sprites[entity.location.z] || [];
            sprites[entity.location.z].push(entity);
        }
    }
    for (const z in sprites) {
        for (const sprite of sprites[z]) {
            drawEntity(ctx, sprite, animState, camera.tileSize, sprite.location.x - camera.x, sprite.location.y - camera.y);
        }
    }
};
},{"./entity":1,"./geometry":4,"./sprite":8}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const entity_1 = require("./entity");
exports.createScene = () => {
    const scene = {
        nodes: [],
        root: {
            scene: null,
            parent: null,
            children: [],
            entity: entity_1.createEntity("scene")
        }
    };
    scene.root.scene = scene;
    return scene;
};
exports.addChild = (node, entity) => {
    const child = {
        scene: node.scene,
        parent: node,
        children: [],
        entity: Object.assign(Object.create(null), entity)
    };
    node.children.push(child);
    node.scene.nodes.push(child);
    return child;
};
exports.removeChild = (node) => {
    if (node.parent != null) {
        const parentIndex = node.parent.children.indexOf(node);
        node.parent.children.splice(parentIndex, 1);
        const sceneIndex = node.scene.nodes.indexOf(node);
        node.scene.nodes.splice(sceneIndex, 1);
    }
};
},{"./entity":1}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const entity_1 = require("./entity");
function isSpriteEntity(entity) {
    return "sprite" in entity;
}
exports.isSpriteEntity = isSpriteEntity;
exports.createSprite = ({ id, sprite }) => {
    let spriteCopy = null;
    if (Array.isArray(sprite)) {
        spriteCopy = sprite.slice();
        for (const i in sprite) {
            sprite[i] = Object.assign(Object.create(null), sprite[i]);
        }
    }
    else {
        spriteCopy = Object.assign(Object.create(null), sprite);
    }
    return entity_1.createEntity(id, {
        sprite: spriteCopy
    });
};
},{"./entity":1}]},{},[5])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
